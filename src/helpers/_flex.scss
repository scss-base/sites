$flex-justify: (
  'left': flex-start,
  'right': flex-end,
  'center': center,
  'justify': space-between,
  'spaced': space-around,
);

$flex-align: (
  'top': flex-start,
  'bottom': flex-end,
  'middle': center,
  'stretch': stretch,
);

/// Horizontally or vertically aligns the items within a flex container.
///
/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.
/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.
@mixin flex-align($x: null, $y: null) {
  @if $x {
    @if map-has-key($flex-justify, $x) {
      $x: map-get($flex-justify, $x);
    } @else {
      @error 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';
    }
  }

  @if $y {
    @if map-has-key($flex-align, $y) {
      $y: map-get($flex-align, $y);
    } @else {
      @error 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';
    }
  }

  align-items: $y;
  justify-content: $x;
}

/// Vertically align a single column within a flex row. Apply this mixin to a flex column.
///
/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.
@mixin flex-align-self($y: null) {
  @if $y {
    @if map-has-key($flex-align, $y) {
      $y: map-get($flex-align, $y);
    } @else {
      @error 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';
    }
  }

  align-self: $y;
}

@mixin base-flex-helpers {

  .flex-container {
    display: flex;
  }

  .flex-child-auto {
    flex: 1 1 auto;
  }

  .flex-child-grow {
    flex: 1 0 auto;
  }

  .flex-child-shrink {
    flex: 0 1 auto;
  }

  // Horizontal alignment using justify-content
  @each $hdir, $prop in map-remove($flex-justify, left) {
    .align-#{$hdir} {
      @include flex-align($x: $hdir);
    }
  }

  // Vertical alignment using align-items and align-self
  @each $vdir, $prop in $flex-align {
    .align-#{$vdir} {
      @include flex-align($y: $vdir);
    }

    .align-self-#{$vdir} {
      @include flex-align-self($y: $vdir);
    }
  }

}
