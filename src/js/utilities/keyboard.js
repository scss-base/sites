export default class Keyboard {
  /**
   * @type {Map<string, Object.<string, string>>}
   */
  static plugins = new Map();

  /**
   * @type {Map<string, string>}
   */
  static keyCodes = new Map(Object.entries({
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    35: 'END',
    36: 'HOME',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN',
  }));

  /**
   * Handles the given (keyboard) event.
   *
   * @param {Event} event - the event generated by the event handler
   * @param {String} pluginName - Base plugin's name, e.g. Modal
   * @param {Object} functions - collection of functions that are to be executed
   */
  static handleKey(event, pluginName, functions) {
    if (!Keyboard.plugins.has(pluginName)) {
      return console.warn('Plugin name not defined!');
    }

    const keyCode = Keyboard.parseKey(event);
    const plugins = Keyboard.plugins.get(pluginName);
    const fn = functions[plugins[keyCode]];

    if (fn && typeof fn === 'function') {
      fn.apply();
    }
  }

  /**
   * Parses the (keyboard) event and returns a String that represents its key.
   * @param {Event} event - the event generated by the event handler
   * @returns {String} key - String that represents the key pressed
   */
  static parseKey(event) {
    let key = Keyboard.keyCodes.get(`${event.which}`) || String.fromCharCode(event.which).toUpperCase();

    // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
    key = key.replace(new RegExp(/\W+/), '');

    if (event.shiftKey) key = `SHIFT_${key}`;
    if (event.ctrlKey) key = `CTRL_${key}`;
    if (event.altKey) key = `ALT_${key}`;

    // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
    key = key.replace(new RegExp(/_$/), '');

    return key;
  }

  /**
   * Registers a keys object with plugin name.
   * @param {String} pluginName - Base plugin's name, e.g. Modal
   * @param {Object.<string, string>} keys
   */
  static register(pluginName, keys) {
    Keyboard.plugins.set(pluginName, keys);
  }
}
