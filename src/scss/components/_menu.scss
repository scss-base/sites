/// Default background color of a tab bar.
/// @type Color
$menu-background: $white !default;

/// Default border color of tab content.
/// @type Border
$menu-border: none !default;

/// Margin of a menu.
/// @type Number
$menu-margin: 0 !default;

/// Left-hand margin of a nested menu.
/// @type Number
$menu-margin-nested: rem-calc(16) !default;

/// Padding for items in a menu.
/// @type Number
$menu-item-padding: rem-calc(10 16) !default;

/// Text color of a menu item.
/// @type Color
$menu-item-color: $primary-color !default;

/// Background color of a menu item.
/// @type Color
$menu-item-background: $white !default;

/// Text color of a hover menu item.
/// @type Color
$menu-item-color-hover: scale-color($primary-color, $lightness: -15%) !default;

/// Background color of a hover menu item.
/// @type Color
$menu-item-background-hover: $grey !default;

/// Text color of an active menu item.
/// @type Color
$menu-item-color-active: $white !default;

/// Background color of an active menu item.
/// @type Color
$menu-item-background-active: $primary-color !default;

/// Creates the base styles for a menu.
/// @param {Color} $background [$menu-background] - @todo Documentation needed
/// @param {Border} $border [$menu-border] - @todo Documentation needed
/// @param {Number} $margin [$menu-margin] - @todo Documentation needed
@mixin menu-base(
  $background: $menu-background,
  $border: $menu-border,
  $margin: $menu-margin
) {
  background: $background;
  border: $border;
  display: flex;
  flex-wrap: nowrap;
  list-style-type: none;
  margin: $margin;

  // Reset styles of inner elements
  input,
  select,
  a,
  button {
    margin-bottom: 0;
  }

  // List items are table cell to allow for vertical alignment
  > li {
    flex: 0 0 auto;

    // Reset line height to make the height of the overall item easier to calculate
    > a {
      display: block;
      line-height: 1;
    }
  }
}

/// Sets the direction for a menu.
/// @param {Keyword} $dir [horizontal] - Direction of the menu can be `horizontal` or `vertical`.
@mixin menu-direction($dir: horizontal) {
  @if $dir == horizontal {
    flex-direction: row;
  } @else if $dir == vertical {
    flex-direction: column;

    > li > a {
      text-align: left;
    }
  } @else {
    @error 'The direction used for menu-direction() must be horizontal or vertical.';
  }
}

/// Sets the style for a menu.
/// @param {Color} $color [$menu-item-color] - @todo Documentation needed
/// @param {Color} $background-hover [$menu-item-background-hover] - @todo Documentation needed
/// @param {Color} $color-hover [$menu-item-color-hover] - @todo Documentation needed
/// @param {Color} $background-active [$menu-item-background-active] - @todo Documentation needed
/// @param {Color} $color-active [$menu-item-color-active] - @todo Documentation needed
/// @param {Number} $padding [$menu-item-padding] - @todo Documentation needed
@mixin menu-style(
  $background: $menu-item-background,
  $color: $menu-item-color,
  $background-hover: $menu-item-background-hover,
  $color-hover: $menu-item-color-hover,
  $background-active: $menu-item-background-active,
  $color-active: $menu-item-color-active,
  $padding: $menu-item-padding
) {
  > li {
    > a {
      background-color: $background;
      color: $color;
      padding: $padding;

      // Hover state
      &:hover {
        background-color: $background-hover;
        color: $color-hover;
      }
    }

    // Active state
    &.is-active > a {
      background-color: $background-active;
      color: $color-active;
      cursor: default;
    }
  }
}

/// Outputs CSS classes for the menu.
@mixin base-menu {
  .menu {
    @include menu-base;
    @include menu-style;

    // Orientation
    @include menu-direction(horizontal);

    &.vertical {
      @include menu-direction(vertical);
    }

    // Responsive orientation
    @each $breakpoint in map_keys($breakpoints) {
      @if $breakpoint != map-first(map_keys($breakpoints)) {
        @include breakpoint-up($breakpoint) {
          &.#{$breakpoint}-horizontal {
            @include menu-direction(horizontal);
          }

          &.#{$breakpoint}-vertical {
            @include menu-direction(vertical);
          }
        }
      }
    }

    // Nesting
    &.nested {
      margin-#{$global-left}: $menu-margin-nested;
    }
  }
}
