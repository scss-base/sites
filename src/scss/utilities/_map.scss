/// Find the next key in a map.
/// @access private
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
/// @return {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
@function map-next($map, $key) {
  // Store the values of the map as a list, so we can access them with nth
  $values: map-values($map);

  // Ghetto for loop
  $i: 1;
  $found: false;

  @each $val in map-keys($map) {
    @if $found == false {
      @if ($key == $val) {
        $found: true;
      }
      $i: $i + 1;
    }
  }

  // If the key doesn't exist, or it's the last key in the map, return null
  @if $i > length($map) {
    @return null;
  } @else {
    // Otherwise, return the value
    @return nth($values, $i);
  }
}

/// Tests whether map is empty.
/// @access private
/// @param {Map} $map - map to run test against
/// @return {Boolean}
@function map-is-empty($map) {
  @return length($map) == 0;
}

/// Returns first element of `$map`.
/// @access private
/// @param {Map} $map - map to retrieve first item from
/// @throws Cannot find first item of empty map.
/// @requires map-is-empty
/// @return {*}
@function map-first($map) {
  @if map-is-empty($map) {
    @error 'Cannot find first item of empty map.';
  }

  @return nth($map, 1);
}

/// Encode a map to JSON
/// @access private
/// @param {Map} $map - map to be encoded
/// @return {String} - encoded map
@function map-to-json($map) {
  $str: "";

  @each $key, $value in $map {
    $str: $str + ', ' + '"#{$key}"' + ': ' + '"#{$value}"';
  }

  @return '"{#{str-slice($str, 3)}}"';
}
